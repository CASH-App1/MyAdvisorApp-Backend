from flask import Blueprint, render_template, jsonify, request, send_from_directory, flash, redirect, url_for
from flask_jwt_extended import jwt_required, current_user as jwt_current_user
from flask_login import current_user, login_required
from.index import index_views

from App.controllers import *

def student_required(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        if not current_user.is_authenticated or not isinstance(current_user, Student):
            return "Unauthorized", 401
        return func(*args, **kwargs)
    return wrapper

student_views = Blueprint('student_views', __name__, template_folder='../templates')

@student_views.route('/student/autogenerated-plan', methods=['POST'])
@student_required
def autogenerate_course_plan():
    data = request.json

    student = Student.query.filter_by(username = current_user.username).first()
    valid_plans = ["Elective Priority", "Easiest Courses", "Fastest Graduation"]

    if data['planType'] in valid_plans:
        plan = generator(student, data['planType'])
        if plan:
            return jsonify(message = f'{command} plan created & added to student plans
            {student.firstName} {student.lastName} - {data['planType']} Course Plan
            {plan.get_json()}'), 201


@student_views.route('/student/course-plan', methods=['POST'])
@student_required
def add_course_to_plan():
    student = Student.query.filter_by(username = current_user.username).first()

    semester = Semester.query.order_by(SemesterHistory.historyID.desc()).first()
    if data['year']  != semester.year and data['semesterType'] != semseter.semesterType:
        return jsonify(error = f'Invalid semester entered'), 400

    if not data['planID']:
        plan = CoursePlan(student.studentID)

    if data['planID']:
        plan = CoursePlan.query.get(data['planID']).first()
        if not plan:
            return jsonify(error = f'Course Plan does not exist'), 400

    qualify = 0 #checks if all prereqs are met
    course = Course.query.get(data['course']).first()
    if not course:
        return jsonify(error = f'Course {data['course'].courseCode} does not exist'), 400 
        
    prereqs = Prerequisite.query.get(course.prereqID).first()
    if prereqs.count() > 0:
        for p in prereqs:
            for s in student.studentHistory:
                for c in s.courses:
                    if p.courseCode == c.courseCode:
                        qualify += 1
                            
    if prereqs.count() == 0 or qualify == prereqs.count():
        added = add_course_to_plan(course, plan)
        if added:
            return jsonify(message = 'Course(s) added successfully'), 200

    if qualify != prereqs.count():
        return jsonify(error = f'The pre-requisites for {course.courseCode} have not been met!'), 400
    
    
@student_views.route('/student/course-plan', methods=['DEL'])
@student_required
def remove_course_from_plan():
    student = Student.query.filter_by(username = current_user.username).first()

    semester = Semester.query.order_by(SemesterHistory.historyID.desc()).first()
    if data['year']  != semester.year and data['semesterType'] != semseter.semesterType:
        return jsonify(error = f'Invalid semester entered'), 400

    if not data['planID']:
        return jsonify(error = f'Course Plan does not exist'), 400

    if data['planID']:
        plan = CoursePlan.query.get(data['planID']).first()
        if not plan:
            return jsonify(error = f'Course Plan does not exist'), 400

    for course in data['courses']:
        course = Course.query.get(course).first()
        if not course:
           return jsonify(error = f'Course {course.courseCode} does not exist'), 400 
        added = remove_course_from_plan(course, plan)





@student_views.route('/student/course-plans', methods=['GET'])
@student_required
def view_course_plans():
    student = Student.query.filter_by(username = current_user.username).first()
    coursePlans = student.coursePlans

    if coursePlans:
        return jsonify(message = f'Student {studen.firstName} {student.lastName} Course Plans: {student.coursePlans}'), 200
    return jsonify(message = f'Student {student.firstName} {student.lastName} has no created course plans.'), 200


@student_views.route('/student/academic-history', methods=['POST'])
@student_required
def update_academic_history():
    data = request.json
   
    semester = Semester.query.order_by(SemesterHistory.semesterID.desc()).first()
    if data['year']  >= semester.year and data['semesterType'] >= semseter.semesterType:
        return jsonify(error = f'Invalid semester entered'), 400

    semesterHist = SemesterHistory.query.filter_by(year = data['year'], semesterType = data['semesterType']).first()
    if semesterHist:
        return jsonify(error = f'Semester {data['semesterType']} - {data['year']} already exists!'), 200
    
    student = Student.query.filter_by(username = current_user.username).first()
    semesterHist = SemesterHistory(student.studentID, data['year'], data['semesterType'])
    if semesterHist:
        for hist in data['courseHistories']:
            courseHist = CourseHistory(courseCode = hist['courseCode'], gradeLetter = hist['gradeLetter'], percent = hist['percent'], courseType = hist['semesterType'], semID = semesterHist.historyID)
            if courseHist not in semesterHist.courses:
                db.session.add(courseHist)
                semesterHist.courses.append(courseHist)
        
        student.studentHistory.append(semesterHist)
        db.session.add(semesterHist)
        db.session.commit()
        return jsonify(message = 'Semester History addition successful'), 200
    return jsonify(message = 'Semester History addition unsuccessful'), 400


@student_views.route('/student/academic-history/<id>', methods=['GET'])
@student_required
def view_academic_history(id):
    student = Student.query.filter_by(username = current_user.username).first()
    history = student.studentHistory

    if history:
        return jsonify(message = f'{student.firstName} {student.lastName} Academic History: {student.studentHistory}'), 200
    return jsonify(error = f'There is no academic history for {student.firstName} {student.lastName}'), 200
    
